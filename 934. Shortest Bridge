#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    int shortestBridge(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        queue<pair<int, int>> points;

        // Cautarea celor două insule
        bool found = false;
        for (int i = 0; i < n && !found; i++) {
            for (int j = 0; j < n && !found; j++) {
                if (grid[i][j] == 1) {
                    dfs(grid, points, directions, i, j);
                    found = true;
                }
            }
        }

        // BFS pentru a extinde una dintre insule pentru a conecta cealaltă
        int steps = 0;
        while (!points.empty()) {
            int size = points.size();
            for (int i = 0; i < size; i++) {
                auto [x, y] = points.front();
                points.pop();
                for (const auto& dir : directions) {
                    int nx = x + dir[0];
                    int ny = y + dir[1];
                    if (nx >= 0 && ny >= 0 && nx < n && ny < n) {
                        if (grid[nx][ny] == 1) {
                            return steps;
                        }
                        if (grid[nx][ny] == 0) {
                            grid[nx][ny] = -1;
                            points.push({nx, ny});
                        }
                    }
                }
            }
            steps++;
        }
        return -1; // Cazul care nu este posibil
    }

    // Funcție auxiliară DFS pentru identificarea primei insule
    void dfs(vector<vector<int>>& grid, queue<pair<int, int>>& points, vector<vector<int>>& directions, int i, int j) {
        if (i < 0 || j < 0 || i >= grid.size() || j >= grid.size() || grid[i][j] != 1) {
            return;
        }
        grid[i][j] = -1;
        points.push({i, j});
        for (const auto& dir : directions) {
            dfs(grid, points, directions, i + dir[0], j + dir[1]);
        }
    }
};


// Funcția shortestBridge este funcția principală care primește grila ca intrare și returnează cel mai mic număr de 0-uri necesare pentru a conecta cele două insule.

// Funcția începe prin inițializarea unor variabile necesare, cum ar fi dimensiunea grilei (n), o listă de direcții pentru deplasarea în grilă (directions) și o coadă numită points pentru a stoca punctele primei insule găsite.

// Funcția shortestBridge este împărțită în două etape principale:

// a. Pasul 1: Găsirea celor două insule

// Funcția caută prima insulă folosind un algoritm de căutare în adâncime (DFS). Odată ce prima insulă este găsită, bucla este întreruptă folosind indicatorul found.

// b. Pasul 2: BFS pentru a extinde una dintre insule pentru a conecta cealaltă

// După găsirea primei insule, funcția folosește un algoritm de căutare în lățime (BFS) pentru a extinde prima insulă către cea de-a doua insulă. BFS continuă până când ajunge la cea de-a doua insulă. Variabila steps urmărește numărul de pași necesari pentru a ajunge la cea de-a doua insulă.

// Funcția dfs este o funcție ajutătoare utilizată pentru a efectua căutarea în adâncime (DFS). Aceasta marchează celulele vizitate ale primei insule ca -1 și le adaugă la coada points.

// Implementarea identifică eficient cele două insule folosind DFS și apoi le conectează folosind BFS. Funcția returnează cel mai mic număr de 0-uri necesare pentru a conecta cele două insule.
